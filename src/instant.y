/* -*- c++ -*- File generated by the BNF Converter (bnfc 2.9.3). */

/* Parser definition to be used with Bison. */

/* Generate header file for lexer. */
%defines "Bison.H"

/* Reentrant parser */
%pure_parser
  /* From Bison 2.3b (2008): %define api.pure full */
%lex-param   { yyscan_t scanner }
%parse-param { yyscan_t scanner }

/* Turn on line/column tracking in the instant_lloc structure: */
%locations

/* Argument to the parser to be filled with the parsed tree. */
%parse-param { YYSTYPE *result }

%{
/* Begin C preamble code */

#include <algorithm> /* for std::reverse */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Absyn.H"

#define YYMAXDEPTH 10000000

/* The type yyscan_t is defined by flex, but we need it in the parser already. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

typedef struct yy_buffer_state *YY_BUFFER_STATE;
extern YY_BUFFER_STATE instant__scan_string(const char *str, yyscan_t scanner);
extern void instant__delete_buffer(YY_BUFFER_STATE buf, yyscan_t scanner);

extern void instant_lex_destroy(yyscan_t scanner);
extern char* instant_get_text(yyscan_t scanner);

extern yyscan_t instant__initialize_lexer(FILE * inp);

/* End C preamble code */
%}

%union
{
  int    _int;
  char   _char;
  double _double;
  char*  _string;
  Program* program_;
  Stmt* stmt_;
  ListStmt* liststmt_;
  Exp* exp_;
}

%{
void yyerror(YYLTYPE *loc, yyscan_t scanner, YYSTYPE *result, const char *msg)
{
  fprintf(stderr, "error: %d,%d: %s at %s\n",
    loc->first_line, loc->first_column, msg, instant_get_text(scanner));
}

int yyparse(yyscan_t scanner, YYSTYPE *result);

extern int yylex(YYSTYPE *lvalp, YYLTYPE *llocp, yyscan_t scanner);
%}

%token          _ERROR_
%token          _LPAREN    /* ( */
%token          _RPAREN    /* ) */
%token          _STAR      /* * */
%token          _PLUS      /* + */
%token          _MINUS     /* - */
%token          _SLASH     /* / */
%token          _SEMI      /* ; */
%token          _EQ        /* = */
%token<_int>    _INTEGER_
%token<_string> _IDENT_

%type <program_> Program
%type <stmt_> Stmt
%type <liststmt_> ListStmt
%type <exp_> Exp1
%type <exp_> Exp2
%type <exp_> Exp3
%type <exp_> Exp4
%type <exp_> Exp

%start Program

%%

Program : ListStmt { std::reverse($1->begin(),$1->end()) ;$$ = new Prog($1); result->program_ = $$; }
;
Stmt : _IDENT_ _EQ Exp { $$ = new SAss($1, $3); result->stmt_ = $$; }
  | Exp { $$ = new SExp($1); result->stmt_ = $$; }
;
ListStmt : /* empty */ { $$ = new ListStmt(); result->liststmt_ = $$; }
  | Stmt { $$ = new ListStmt(); $$->push_back($1); result->liststmt_ = $$; }
  | Stmt _SEMI ListStmt { $3->push_back($1); $$ = $3; result->liststmt_ = $$; }
;
Exp1 : Exp2 _PLUS Exp1 { $$ = new ExpAdd($1, $3); result->exp_ = $$; }
  | Exp2 { $$ = $1; result->exp_ = $$; }
;
Exp2 : Exp2 _MINUS Exp3 { $$ = new ExpSub($1, $3); result->exp_ = $$; }
  | Exp3 { $$ = $1; result->exp_ = $$; }
;
Exp3 : Exp3 _STAR Exp4 { $$ = new ExpMul($1, $3); result->exp_ = $$; }
  | Exp3 _SLASH Exp4 { $$ = new ExpDiv($1, $3); result->exp_ = $$; }
  | Exp4 { $$ = $1; result->exp_ = $$; }
;
Exp4 : _INTEGER_ { $$ = new ExpLit($1); result->exp_ = $$; }
  | _IDENT_ { $$ = new ExpVar($1); result->exp_ = $$; }
  | _LPAREN Exp _RPAREN { $$ = $2; result->exp_ = $$; }
;
Exp : Exp1 { $$ = $1; result->exp_ = $$; }
;

%%


/* Entrypoint: parse Program* from file. */
Program* pProgram(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = instant__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  instant_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.program_;
  }
}

/* Entrypoint: parse Program* from string. */
Program* psProgram(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = instant__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = instant__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  instant__delete_buffer(buf, scanner);
  instant_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.program_;
  }
}

/* Entrypoint: parse Stmt* from file. */
Stmt* pStmt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = instant__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  instant_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.stmt_;
  }
}

/* Entrypoint: parse Stmt* from string. */
Stmt* psStmt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = instant__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = instant__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  instant__delete_buffer(buf, scanner);
  instant_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.stmt_;
  }
}

/* Entrypoint: parse ListStmt* from file. */
ListStmt* pListStmt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = instant__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  instant_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.liststmt_->begin(), result.liststmt_->end());
    return result.liststmt_;
  }
}

/* Entrypoint: parse ListStmt* from string. */
ListStmt* psListStmt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = instant__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = instant__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  instant__delete_buffer(buf, scanner);
  instant_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.liststmt_->begin(), result.liststmt_->end());
    return result.liststmt_;
  }
}

/* Entrypoint: parse Exp* from file. */
Exp* pExp1(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = instant__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  instant_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.exp_;
  }
}

/* Entrypoint: parse Exp* from string. */
Exp* psExp1(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = instant__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = instant__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  instant__delete_buffer(buf, scanner);
  instant_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.exp_;
  }
}

/* Entrypoint: parse Exp* from file. */
Exp* pExp2(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = instant__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  instant_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.exp_;
  }
}

/* Entrypoint: parse Exp* from string. */
Exp* psExp2(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = instant__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = instant__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  instant__delete_buffer(buf, scanner);
  instant_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.exp_;
  }
}

/* Entrypoint: parse Exp* from file. */
Exp* pExp3(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = instant__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  instant_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.exp_;
  }
}

/* Entrypoint: parse Exp* from string. */
Exp* psExp3(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = instant__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = instant__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  instant__delete_buffer(buf, scanner);
  instant_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.exp_;
  }
}

/* Entrypoint: parse Exp* from file. */
Exp* pExp4(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = instant__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  instant_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.exp_;
  }
}

/* Entrypoint: parse Exp* from string. */
Exp* psExp4(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = instant__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = instant__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  instant__delete_buffer(buf, scanner);
  instant_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.exp_;
  }
}

/* Entrypoint: parse Exp* from file. */
Exp* pExp(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = instant__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  instant_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.exp_;
  }
}

/* Entrypoint: parse Exp* from string. */
Exp* psExp(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = instant__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = instant__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  instant__delete_buffer(buf, scanner);
  instant_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.exp_;
  }
}



