/* File generated by the BNF Converter (bnfc 2.9.3) (Test.C) and the modified by me */

#include <cstdio>
#include <string>
#include <iostream>
#include "Parser.H"
#include "Printer.H"
#include "Absyn.H"
#include "ParserError.H"
#include "LLVM_Compiler.cpp"
#include "JVM_Compiler.cpp"

void usage() {
    printf("usage: ./Compiler <input_file> <jvm/llvm>:\n");
}

int main(int argc, char **argv) {
    FILE *input;
    char *filename;
    std::string compiler_type;

    if (argc != 3) {
        usage();
        exit(1);
    }
    filename = argv[1];
    compiler_type = argv[2];

    input = fopen(filename, "r");
    if (!input) {
        std::cout << "12312312";
        usage();
        exit(1);
    }
    if (compiler_type != "jvm" && compiler_type != "llvm") {
        std::cout << compiler_type;
        usage();
        exit(1);
    }

    // todo wyciągnąć nazwę (i całą ścieżkę) z filename, użyć do output nazwy/ścieżki

    /* The default entry point is used. For other options see Parser.H */
    Program *parse_tree = nullptr;
    try {
        parse_tree = pProgram(input);
    } catch (parse_error &e) {
        std::cerr << "Parse error on line " << e.getLine() << "\n";
    }
    if (parse_tree) {
        printf("\nParse Successful!\n");
        printf("\n[Abstract Syntax]\n");
        ShowAbsyn *s = new ShowAbsyn();
        printf("%s\n\n", s->show(parse_tree));
        printf("[Linearized Tree]\n");
        PrintAbsyn *p = new PrintAbsyn();
        printf("%s\n\n", p->print(parse_tree));
        if (compiler_type == "llvm") {
            auto compiler = new LLVM_Compiler(parse_tree,
                                              "todofilename.ll"); // TODO filename from input arg, for scripts
            compiler->compile();
        } else {
            auto compiler = new JVM_Compiler(parse_tree,
                                             "todofilename.j"); // TODO filename from input arg, for scripts
            compiler->compile();
        }

        delete (parse_tree);
        return 0;
    }
    return 1;
}

